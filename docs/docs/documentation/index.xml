<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>HalideOS</title>
    <link>https://dsc-kiit.github.io/project-halide/docs/documentation/</link>
    <description>Recent content on HalideOS</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://dsc-kiit.github.io/project-halide/docs/documentation/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://dsc-kiit.github.io/project-halide/docs/documentation/Console/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dsc-kiit.github.io/project-halide/docs/documentation/Console/</guid>
      <description>Console Commands in HalideOS #  The console in Halide is pretty simple. Just a while loop that evaluates the the commands entered by the user using a big nested if else, and then defers execution of the command to the proper functions.
 Files: include/console.h and src/console.cpp  The console supports the following commands
 about help greet calculator - A basic command line calculator clear switch console - Switches to the next console  Refer the src/console.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://dsc-kiit.github.io/project-halide/docs/documentation/Frame-Buffer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dsc-kiit.github.io/project-halide/docs/documentation/Frame-Buffer/</guid>
      <description>The Frame Buffer #  HalideOS uses the APIs provided by the BIOS to display text on the screen. We did not implement drivers for the graphics hardware to keep the code simple. BIOS implements a combination of memory-mapped I/O and I/O ports system to manipulate the screen and display the text.
Memory Mapped I/O and I/O Ports #  There are usually two different ways to interact with the hardware, memory-mapped I/O and I/O ports.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://dsc-kiit.github.io/project-halide/docs/documentation/Keyboard-Driver/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dsc-kiit.github.io/project-halide/docs/documentation/Keyboard-Driver/</guid>
      <description>The Keyboard Driver #  The keyboard driver does the task of reading the input coming from the keyboard and writing it to the screen using the FrameBuffer driver. The keyboard driver uses I/O ports mapped to memory addresses 0x64 and 0x60 to read the data coming from the keyboard.
Every time a key on the keyboard is pressed, 0x64 is set and an 8 bit integer is available in 0x60 which is passed to a massive switch case that appropriately writes the text on the screen.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://dsc-kiit.github.io/project-halide/docs/documentation/Standard-Library/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dsc-kiit.github.io/project-halide/docs/documentation/Standard-Library/</guid>
      <description>The Standard Library #  The standard library of HalideOS is a set of a few abstractions for some common data structures and utility functions that we used to again and again for the kernel as well as the shell programs.
All the classes and the functions are encapsulated in the hldstd namespace for clarity.
 Files: include/halidestdlib.h and src/halidestdlib.cpp Namespaces: hldstd, hldstd::math  Classes  hldstd::string hltstd::stack&amp;lt;T&amp;gt;   Functions Refer below for details on return types with accurate namespaces.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://dsc-kiit.github.io/project-halide/docs/documentation/Windows/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dsc-kiit.github.io/project-halide/docs/documentation/Windows/</guid>
      <description>Windows in HalideOS #  We have added support to divide the screen into multiple consoles. It is very similar to diving a linux terminal into multiple parts. This was done using a Window class that is passed to the FrameBuffer::Writer so that it can restrict the movement of the cursor in the limits defined in the Windows class.
 Files: include/windows.h  Its a pretty small class, everything is done in the header file, you can refer the source code to understand what it does.</description>
    </item>
    
  </channel>
</rss>