<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>HalideOS</title>
    <link>https://dsc-kiit.github.io/project-halide-website/</link>
    <description>Recent content on HalideOS</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://dsc-kiit.github.io/project-halide-website/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://dsc-kiit.github.io/project-halide-website/docs/documentation/1.-Introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dsc-kiit.github.io/project-halide-website/docs/documentation/1.-Introduction/</guid>
      <description>Introduction to the HalideOS Codebase #  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://dsc-kiit.github.io/project-halide-website/docs/documentation/2.-Design/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dsc-kiit.github.io/project-halide-website/docs/documentation/2.-Design/</guid>
      <description>Overall Design of HalideOS #  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://dsc-kiit.github.io/project-halide-website/docs/documentation/3.-Frame-Buffer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dsc-kiit.github.io/project-halide-website/docs/documentation/3.-Frame-Buffer/</guid>
      <description>The Frame Buffer #  HalideOS uses the APIs provided by the BIOS to display text on the screen. We did not implement drivers for the graphics hardware to keep the code simple. BIOS implements a combination of memory-mapped I/O and I/O ports system to manipulate the screen and display the text.
Memory Mapped I/O and I/O Ports #  There are usually two different ways to interact with the hardware, memory-mapped I/O and I/O ports.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://dsc-kiit.github.io/project-halide-website/docs/documentation/4.-Keyboard-Driver/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dsc-kiit.github.io/project-halide-website/docs/documentation/4.-Keyboard-Driver/</guid>
      <description>The Keyboard Driver #  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://dsc-kiit.github.io/project-halide-website/docs/documentation/5.-Standard-Library/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dsc-kiit.github.io/project-halide-website/docs/documentation/5.-Standard-Library/</guid>
      <description>The Standard Library #  The standard library of HalideOS is a set of a few abstractions for some common data structures and utility functions that we used to again and again for the kernel as well as the shell programs.
All the classes and the functions are encapsulated in the hldstd namespace for clarity.
 Files: include/halidestdlib.h and src/halidestdlib.cpp Namespaces: hldstd, hldstd::math  Classes  hldstd::string hltstd::stack&amp;lt;T&amp;gt;   Functions Refer below for details on return types with accurate namespaces.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://dsc-kiit.github.io/project-halide-website/docs/documentation/6.-Whats-Next/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dsc-kiit.github.io/project-halide-website/docs/documentation/6.-Whats-Next/</guid>
      <description>What&amp;rsquo;s Next for HalideOS #  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://dsc-kiit.github.io/project-halide-website/docs/Getting-Started/Introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dsc-kiit.github.io/project-halide-website/docs/Getting-Started/Introduction/</guid>
      <description>Introduction to Operating Systems Development #  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://dsc-kiit.github.io/project-halide-website/docs/Getting-Started/Required-Knowledge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dsc-kiit.github.io/project-halide-website/docs/Getting-Started/Required-Knowledge/</guid>
      <description>Required Knowledge #  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://dsc-kiit.github.io/project-halide-website/docs/Getting-Started/Resources-and-Tutorials/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dsc-kiit.github.io/project-halide-website/docs/Getting-Started/Resources-and-Tutorials/</guid>
      <description>Resources and Tutorials #  A massive list of all sorts of tutorials, books and videos on operating systems.
Web #   https://wiki.osdev.org/ http://www.lowlevel.eu/wiki/Hauptseite https://github.com/cfenollosa/os-tutorial  Books #   http://www.cs.bham.ac.uk/~exr/lectures/opsys/10_11/lectures/os-dev.pdf https://littleosbook.github.io/ Operating System Concepts - Galvin and Silberschatz Modern Operating Systems - Andrew Tanenbaum and Herbert Bos Operating Systems: Three Easy Pieces - Andrea C. Arpaci-Dusseau and Remzi H. Arpaci-Dusseau  Videos #   https://www.youtube.com/playlist?list=PLHh55M_Kq4OApWScZyPl5HhgsTJS9MZ6M  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://dsc-kiit.github.io/project-halide-website/docs/Getting-Started/Running-Halide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dsc-kiit.github.io/project-halide-website/docs/Getting-Started/Running-Halide/</guid>
      <description>Running HalideOS on your System #  Dependencies #  It is recommended that you used a Linux based operating system for building HalideOS. The C/C++ development tools and ecosystem are much easier to use on a Linux based system.
 g++ - a C++ compiler nasm or as - an x86 assembler ld - the GNU Linker make - GNU Make, a build tool for linux qemu - an x86 Emulator git - for version control A text editor of your choice, we use VSCode  You can google up how to install these tools for your host operating system.</description>
    </item>
    
  </channel>
</rss>